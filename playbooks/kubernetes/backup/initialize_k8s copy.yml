---
- name: Kubernetes Hosts Preparation
  hosts: k8s_master
  become: true

  vars:
    k8s_user: k8sadmin

  pre_tasks:
    - name: create 'k8sadmin' user
      user:
        name: "{{ k8s_user }}"
        shell: /bin/bash
        groups: sudo
        append: yes
    - name: add the k8sadmin to the sudoers
      copy:
        dest: "/etc/sudoers.d/k8sadmin"
        content: "{{ k8s_user }}    ALL=(ALL)  NOPASSWD: ALL"
    - name: install bash-completion
      apt: name=bash-completion

    - name: copy Kubernetes Autocomplete configuration file
      become_user: "{{ k8s_user }}"
      copy: src=files/k8s_autocomplete_rc dest="~/.k8s_autocomplete_rc"
    - name: source .k8s_autocomplete_rc
      become_user: "{{ k8s_user }}"
      lineinfile:
        dest: "~{{ k8s_user }}/.bashrc"
        regexp: '^\. ~/.k8s_autocomplete_rc'
        line: ". ~/.k8s_autocomplete_rc"
        state: present

  tasks:
    - name: Check if the master node is already initialized
      stat:
        path: /etc/kubernetes/admin.conf
      register: kubeadm_init
    - name: kubeadm init
      command: >
        kubeadm init --pod-network-cidr=10.244.0.0/16 
        --apiserver-advertise-address={{ ansible_host }} 
        --cri-socket=unix:///run/containerd/containerd.sock
      when: kubeadm_init.stat.exists == false

    - name: Create .kube directory
      become_user: "{{ k8s_user }}"
      file:
        path: ~{{k8s_user}}/.kube
        state: directory
        owner: "{{ k8s_user }}"
        group: "{{ k8s_user }}"
        mode: 0755
        
    - name: Copy the kube config file
      copy:
        src: /etc/kubernetes/admin.conf
        dest: ~{{k8s_user}}/.kube/config
        remote_src: yes
        owner: k8sadmin
        group: k8sadmin
        mode: 0644

    - name: apply flannel
      become_user: "{{ k8s_user }}"
      command: kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml
    
    - name: Get the token for joining the worker nodes
      become_user: "{{ k8s_user }}"
      shell: kubeadm token create --print-join-command
      register: kubernetes_join_command

    - name: Display registered output
      debug:
        var: kubernetes_join_command.stdout_lines

    - name: Create dummy host to store variable for node config
      add_host:
        name: "DUMMY_HOST"
        JOIN_COMMAND: "{{ kubernetes_join_command.stdout_lines[0] }}"

    # - name: Check if the master node is already initialized
    #   stat:
    #     path: /etc/kubernetes/admin.conf
    #   register: kubeadm_init
    # - name: initialize master node if it has not been initialized yet.
    #   block:
    #     - name: Initialize the master node
    #       command: kubeadm init --pod-network-cidr=10.244.0.0/16
    #     - name: Create .kube directory
    #       file:
    #         path: /home/k8sadmin/.kube
    #         state: directory
    #         owner: k8sadmin
    #         group: k8sadmin
    #         mode: 0755
    #     - name: Copy the kube config file
    #       copy:
    #         src: /etc/kubernetes/admin.conf
    #         dest: /home/k8sadmin/.kube/config
    #         remote_src: yes
    #         owner: k8sadmin
    #         group: k8sadmin
    #         mode: 0644
    #   when: kubeadm_init.stat.exists == false
        
    # - name: Install calico CNI
    #   command: kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml
    #   become: yes
    #   become_user: k8sadmin

    # - name: Get the token for joining the worker nodes
    #   become: yes
    #   become_user: k8sadmin
    #   shell: kubeadm token create --print-join-command
    #   register: kubernetes_join_command
    # - name: Display registered output
    #   debug:
    #     var: kubernetes_join_command.stdout_lines

    # - name: Set strictARP for metallb
    #   shell: |
    #     kubectl get configmap kube-proxy -n kube-system -o yaml | \
    #     sed -e "s/strictARP: false/strictARP: true/" | \
    #     kubectl apply -f - -n kube-system
    #   become: yes
    #   become_user: k8sadmin
    # - name: Install metallb namespace
    #   command: kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.10.3/manifests/namespace.yaml
    #   become: yes
    #   become_user: k8sadmin
    # - name: Install metallb
    #   command: kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.13.12/config/manifests/metallb-native.yaml
    #   become: yes
    #   become_user: k8sadmin
    # # Setup Metallb
    # - name: Copy metallb config file
    #   copy:
    #     src: "{{ playbook_dir }}/metallb-config.yaml"
    #     dest: /home/k8sadmin/metallb-config.yaml
    #     owner: k8sadmin
    #     group: k8sadmin
    #     mode: 0644
    # - name: Install metallb config
    #   command: kubectl apply -f /home/k8sadmin/metallb-config.yaml
    #   become: yes
    #   become_user: k8sadmin
    # - name: Rolling restart of metallb pods
    #   command: kubectl rollout restart deployment controller -n metallb-system
    #   become_user: k8sadmin
    #   become: yes

    # # Setup Longhorn
    # - name: Remove taint from master node to allow disk replication
    #   command: kubectl taint nodes --all node-role.kubernetes.io/control-plane-
    #   become: yes
    #   become_user: k8sadmin
    # - name: Install Longhorn
    #   command: kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v1.5.3/deploy/longhorn.yaml
    #   become: yes
    #   become_user: k8sadmin

- name: Kubernetes Worker Initialization
  hosts: k8s_workers
  become: true

  tasks:
    - name: Check if the worker node is already joined
      stat:
        path: /etc/kubernetes/kubelet.conf
      register: kubeadm_join
    - name: Join the worker nodes to the cluster
      command: "{{ hostvars['DUMMY_HOST']['JOIN_COMMAND'] }}"
      when: kubeadm_join.stat.exists == false