---
- name: Build MDT platform source code
  hosts: all
  become: false

  vars:
    user_home_dir: "{{ ansible_env.HOME }}"
    development_dir: "{{ user_home_dir }}/development"
    common_dir: "{{ development_dir }}/common"
    mdt_dir: "{{ development_dir }}/mdt"
    misc_dir: "{{ development_dir }}/misc"
    mdtpy_dir: "{{ development_dir }}/mdtpy"

    utils_repo_url: "https://github.com/kwlee0220/utils.git"
    utils_project_dir: "{{ common_dir }}/utils"
    pyutils_repo_url: "https://github.com/kwlee0220/pyutils.git"
    pyutils_project_dir: "{{ common_dir }}/pyutils"

    argo_java_client_repo_url: "https://github.com/kwlee0220/argo-java-client.git"
    argo_java_client_project_dir: "{{ misc_dir }}/argo-java-client"

    mdt_client_repo_url: "https://github.com/kwlee0220/mdt-client.git"
    mdt_client_project_dir: "{{ mdt_dir }}/mdt-client"

    faaast_lib_repo_url: "https://github.com/kwlee0220/faaast-lib.git"
    faaast_lib_project_dir: "{{ mdt_dir }}/faaast/faaast-lib"

    faaast_starter_repo_url: "https://github.com/kwlee0220/faaast-starter.git"
    faaast_starter_project_dir: "{{ mdt_dir }}/faaast/faaast-starter"

    mdt_instance_repo_url: "https://github.com/kwlee0220/mdt-instance.git"
    mdt_instance_project_dir: "{{ mdt_dir }}/mdt-instance"

    mdt_manager_repo_url: "https://github.com/kwlee0220/mdt-manager.git"
    mdt_manager_project_dir: "{{ mdt_dir }}/mdt-manager"

    mdt_operation_http_repo_url: "https://github.com/kwlee0220/mdt-operation-http.git"
    mdt_operation_http_project_dir: "{{ mdt_dir }}/mdt-operation-http"

    mdt_workflow_argo_repo_url: "https://github.com/kwlee0220/mdt-workflow-argo.git"
    mdt_workflow_argo_project_dir: "{{ mdt_dir }}/mdt-workflow-argo"

    mdt_apps_repo_url: "https://github.com/kwlee0220/mdt-apps.git"
    mdt_apps_project_dir: "{{ mdt_dir }}/mdt-apps"

    mdtpy_repo_url: "https://github.com/kwlee0220/mdtpy.git"
    mdtpy_project_dir: "{{ mdtpy_dir }}/mdtpy"

    mdt_home: "{{ user_home_dir }}/mdt"
    mdt_version: "1.1.2"
    symlink_config:
      - src: "{{ mdt_dir }}/mdt-client/build/libs/mdt-client-{{ mdt_version }}-all.jar"
        dest: "{{ mdt_home }}/mdt-client/mdt-client-all.jar"
        force: yes
      - src: "{{ mdt_dir }}/mdt-manager/build/libs/mdt-manager-{{ mdt_version }}-all.jar"
        dest: "{{ mdt_home }}/mdt-manager/mdt-manager-all.jar"
        force: yes
      - src: "{{ mdt_dir }}/mdt-instance/build/libs/mdt-instance-{{ mdt_version }}-all.jar"
        dest: "{{ mdt_home }}/mdt-manager/mdt-instance-all.jar"
        force: yes
      - src: "{{ mdt_dir }}/mdt-operation-http/build/libs/mdt-operation-http-{{ mdt_version }}.jar"
        dest: "{{ mdt_home }}/mdt-operation-http/mdt-operation-http.jar"
        force: yes
      - src: "{{ mdt_dir }}/mdt-workflow-argo/build/libs/mdt-workflow-argo-{{ mdt_version }}-all.jar"
        dest: "{{ mdt_home }}/mdt-workflow-argo/mdt-workflow-argo.jar"
        force: yes

  tasks:
    - name: Remove existing development directory
      file:
        path: "{{ development_dir }}"
        state: absent

    - name: Create development and common directory
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - "{{ development_dir }}"
        - "{{ common_dir }}"

    - name: Clone utils repository
      git:
        repo: "{{ utils_repo_url }}"
        dest: "{{ utils_project_dir }}"
        version: master
        force: no
    - name: Build utils project with Gradle
      shell: |
        cd {{ utils_project_dir }}
        gradle assemble
      args:
        executable: /bin/bash
    - name: Clone 'pyutils' repository
      git:
        repo: "{{ pyutils_repo_url }}"
        dest: "{{ pyutils_project_dir }}"
        version: master
        force: no


    - name: Remove existing 'misc' directory
      file:
        path: "{{ misc_dir }}"
        state: absent
    - name: create 'misc' directory
      file:
        path: "{{ misc_dir }}"
        state: directory
        mode: '0755'
    - name: Clone 'argo-java-client' repository
      git:
        repo: "{{ argo_java_client_repo_url }}"
        dest: "{{ argo_java_client_project_dir }}"
        version: master
        force: no
    - name: Build 'argo-java-client' project with Gradle
      shell: |
        cd {{ argo_java_client_project_dir }}
        gradle assemble
      args:
        executable: /bin/bash


    - name: Remove existing mdt directory
      file:
        path: "{{ mdt_dir }}"
        state: absent
    - name: create mdt directory
      file:
        path: "{{ mdt_dir }}"
        state: directory
        mode: '0755'

    - name: Clone 'mdt-client' repository
      git:
        repo: "{{ mdt_client_repo_url }}"
        dest: "{{ mdt_client_project_dir }}"
        version: master
        force: no
    - name: Build 'mdt-client' project with Gradle
      shell: |
        cd {{ mdt_client_project_dir }}
        gradle assemble
      args:
        executable: /bin/bash

    - name: Clone 'faaast-lib' repository
      git:
        repo: "{{ faaast_lib_repo_url }}"
        dest: "{{ faaast_lib_project_dir }}"
        version: master
        force: no
    - name: Build 'faaast-lib' project with Gradle
      shell: |
        cd {{ faaast_lib_project_dir }}
        gradle assemble
      args:
        executable: /bin/bash

    - name: Clone 'faaast-starter' repository
      git:
        repo: "{{ faaast_starter_repo_url }}"
        dest: "{{ faaast_starter_project_dir }}"
        version: master
        force: no
    - name: Build 'faaast-starter' project with Gradle
      shell: |
        cd {{ faaast_starter_project_dir }}
        gradle assemble
      args:
        executable: /bin/bash

    - name: Clone 'mdt-instance' repository
      git:
        repo: "{{ mdt_instance_repo_url }}"
        dest: "{{ mdt_instance_project_dir }}"
        version: master
        force: no
    - name: Build 'mdt-instance' project with Gradle
      shell: |
        cd {{ mdt_instance_project_dir }}
        gradle assemble
      args:
        executable: /bin/bash

    - name: Clone 'mdt-manager' repository
      git:
        repo: "{{ mdt_manager_repo_url }}"
        dest: "{{ mdt_manager_project_dir }}"
        version: master
        force: no
    - name: Build 'mdt-manager' project with Gradle
      shell: |
        cd {{ mdt_manager_project_dir }}
        gradle assemble
      args:
        executable: /bin/bash

    - name: Clone 'mdt-operation-http' repository
      git:
        repo: "{{ mdt_operation_http_repo_url }}"
        dest: "{{ mdt_operation_http_project_dir }}"
        version: master
        force: no
    - name: Build 'mdt-operation-http' project with Gradle
      shell: |
        cd {{ mdt_operation_http_project_dir }}
        gradle assemble
      args:
        executable: /bin/bash

    - name: Clone 'mdt-workflow-argo' repository
      git:
        repo: "{{ mdt_workflow_argo_repo_url }}"
        dest: "{{ mdt_workflow_argo_project_dir }}"
        version: master
        force: no
    - name: Build 'mdt-workflow-argo' project with Gradle
      shell: |
        cd {{ mdt_workflow_argo_project_dir }}
        gradle assemble
      args:
        executable: /bin/bash

    - name: Clone 'mdt-apps' repository
      git:
        repo: "{{ mdt_apps_repo_url }}"
        dest: "{{ mdt_apps_project_dir }}"
        version: master
        force: no
    - name: Build 'mdt-apps' project with Gradle
      shell: |
        cd {{ mdt_apps_project_dir }}
        gradle assemble
      args:
        executable: /bin/bash


    - name: Create symbolic links
      file:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        state: link
        force: "{{ item.force | default(no) }}"
      loop: "{{ symlink_config }}"


    - name: Remove existing 'mdtpy' directory
      file:
        path: "{{ mdtpy_dir }}"
        state: absent
    - name: create 'mdtpy' directory
      file:
        path: "{{ mdtpy_dir }}"
        state: directory
        mode: '0755'

    - name: Clone 'mdtpy' repository
      git:
        repo: "{{ mdtpy_repo_url }}"
        dest: "{{ mdtpy_project_dir }}"
        version: master
        force: no

    - name: Install necessary Python modules for 'mdtpy'
      pip:
        name:
          - dataclasses_json
        state: present
