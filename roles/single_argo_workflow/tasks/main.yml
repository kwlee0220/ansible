---
- name: Wait for k3s to be ready
  shell: kubectl get nodes
  register: k3s_status
  until: k3s_status.rc == 0
  retries: 30
  delay: 10
  changed_when: false
  environment:
    KUBECONFIG: "{{ user_home_dir }}/.kube/config"

- name: Install Helm
  shell: curl -fsSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
  args:
    creates: /usr/local/bin/helm
  become: true

- name: Add Argo Helm repo
  shell: |
    helm repo add argo https://argoproj.github.io/argo-helm
    helm repo update
  changed_when: false
  environment:
    KUBECONFIG: "{{ user_home_dir }}/.kube/config"

- name: Install Argo Workflows
  shell: >
    helm install argo-workflows argo/argo-workflows
    -n {{ argo_namespace }} --create-namespace
    --set server.extraArgs="{--auth-mode={{ argo_auth_mode }}}"
    --set server.serviceType={{ argo_service_type }}
  args:
    creates: /usr/local/bin/argo
  environment:
    KUBECONFIG: "{{ user_home_dir }}/.kube/config"

- name: Download Argo CLI
  get_url:
    url: "{{ argo_cli_url }}"
    dest: /tmp/argo-linux-amd64.gz
    mode: '0644'

- name: Extract Argo CLI
  shell: gunzip /tmp/argo-linux-amd64.gz
  args:
    creates: /tmp/argo-linux-amd64

- name: Install Argo CLI
  copy:
    src: /tmp/argo-linux-amd64
    dest: /usr/local/bin/argo
    mode: '0755'
    remote_src: yes
  become: true

- name: Create systemd service file
  template:
    src: argo-portforward.service.j2
    dest: /etc/systemd/system/argo-portforward.service
    mode: '0644'
  become: true

- name: Reload systemd daemon
  systemd:
    daemon_reload: yes
  become: true

- name: Enable and start Argo port-forward service
  systemd:
    name: argo-portforward
    enabled: yes
    state: started
  become: true

- name: Verify Argo installation
  shell: argo version
  register: argo_version
  changed_when: false

- name: Display Argo UI access URL
  debug:
    msg: "Access Argo Workflows UI at https://{{ ansible_host | default('localhost') }}:{{ argo_port }}"

